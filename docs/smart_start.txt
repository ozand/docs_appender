@echo off
setlocal EnableExtensions DisableDelayedExpansion
chcp 65001 > nul
echo.
echo [ROCKET] Smart Start for audi_dic2text
echo --------------------------------------------------
echo.

REM Check for --clear parameter
set CLEAR_MODE=false
if "%1"=="--clear" (
    set CLEAR_MODE=true
    echo [INFO] Cleanup mode activated
    echo.
) else (
    if "%1"=="--help" (
        echo [HELP] Smart Start Usage:
        echo.
        echo   smart_start.bat          - Normal startup
        echo   smart_start.bat --clear  - Startup with full cleanup
        echo   smart_start.bat --help   - Show this help
        echo.
        echo [INFO] --clear mode cleans:
        echo   - __pycache__ directories and .pyc files
        echo   - All logs and temporary files
        echo   - Port configuration
        echo   - Tasks and history
        echo   - Streamlit cache
        echo.
        pause
        exit /b 0
    ) else (
        if not "%1"=="" (
            echo [ERROR] Unknown parameter: %1
            echo [HELP] Use: smart_start.bat --help
            pause
            exit /b 1
        )
    )
)

REM Check if Python is available
python --version > nul 2>&1
if errorlevel 1 (
    echo [ERROR] Python not found. Install Python and add to PATH.
    pause
    exit /b 1
)

REM Change to project directory
cd /d "%~dp0"

REM Perform cleanup if --clear mode is active
if "%CLEAR_MODE%"=="true" (
    echo [CLEANUP] Performing full cleanup...
    
    REM Use Python script for more reliable cleanup
    if exist "cleanup.py" (
        echo [CLEANUP] Using Python cleanup utility...
        python cleanup.py
    ) else (
        echo [CLEANUP] Performing basic cleanup...
        
        REM Clean __pycache__ directories
        echo [CLEANUP] Removing __pycache__ directories...
        for /r %%i in (__pycache__) do (
            if exist "%%i" (
                echo   Removing: %%i
                rmdir /s /q "%%i" > nul 2>&1
            )
        )
        
        REM Clean .pyc files
        echo [CLEANUP] Removing .pyc files...
        del /s /q *.pyc > nul 2>&1
        
        REM Clean logs
        echo [CLEANUP] Removing log files...
        if exist "logs" rmdir /s /q "logs" > nul 2>&1
        del /q *.log > nul 2>&1
        
        REM Clean temporary files
        echo [CLEANUP] Removing temporary files...
        del /q temp_* > nul 2>&1
        del /q tmp_* > nul 2>&1
        
    REM Clean port configuration (prefer config/; keep legacy root cleanup)
    echo [CLEANUP] Removing port configuration...
    if exist "config\port_config.json" del "config\port_config.json" > nul 2>&1
    if exist "frontend\port_config.json" del "frontend\port_config.json" > nul 2>&1
    if exist "port_config.json" del "port_config.json" > nul 2>&1
        
        REM Clean Streamlit cache
        echo [CLEANUP] Removing Streamlit cache...
        if exist ".streamlit" rmdir /s /q ".streamlit" > nul 2>&1
    )
    
    echo [SUCCESS] Cleanup completed!
    echo.
)

REM Decide on virtual environment directory (.venv preferred)
set "VENV_DIR=.venv"
if exist ".venv" (
    set "VENV_DIR=.venv"
) else (
    if exist "venv" (
        set "VENV_DIR=venv"
    )
)

REM Create virtual environment if it doesn't exist
if not exist "%VENV_DIR%" (
    echo [SETUP] Creating virtual environment in %VENV_DIR% ...
    python -m venv "%VENV_DIR%"
    if errorlevel 1 (
        echo [ERROR] Failed to create virtual environment
        pause
        exit /b 1
    )
    echo [SUCCESS] Virtual environment created
    echo.
)

set "PYTHON_CMD=%VENV_DIR%\Scripts\python.exe"
if not exist "%PYTHON_CMD%" (
    echo [ERROR] Python executable not found at %PYTHON_CMD%
    pause
    exit /b 1
)
echo [SETUP] Using interpreter: %PYTHON_CMD%
echo [DEBUG] Dependency install decision start

REM Install dependencies: prefer requirements.txt else editable pyproject
if exist "requirements.txt" (
    echo [SETUP] Installing dependencies from requirements.txt
    "%PYTHON_CMD%" -m pip install -r requirements.txt
    if errorlevel 1 echo [WARNING] Dependency install issues (requirements.txt) & goto :after_deps
    echo [SUCCESS] Requirements installed
) else (
    if exist "pyproject.toml" (
        echo [SETUP] Installing project (pyproject.toml)
        "%PYTHON_CMD" -m pip install --upgrade pip
        "%PYTHON_CMD%" -m pip install -e .
        if errorlevel 1 echo [WARNING] Project install issues (pyproject) & goto :after_deps
        echo [SUCCESS] Project installed
        echo [SETUP] Checking critical deps
        "%PYTHON_CMD%" -c "import importlib,subprocess,sys;mods=['requests','loguru','faster_whisper'];missing=[m for m in mods if importlib.util.find_spec(m) is None];print('MISSING '+','.join(missing) if missing else 'ALL_DEPS_OK');[subprocess.check_call([sys.executable,'-m','pip','install',m]) for m in missing] if missing else None"
    ) else (
        echo [WARNING] No dependency manifest found
    )
)

:after_deps

REM Verify smart_start.py exists
if not exist "scripts\development\smart_start.py" (
    echo [ERROR] smart_start.py not found at scripts\development\smart_start.py
    echo [ERROR] Please check the file location
    pause
    exit /b 1
)

REM Run Smart Start Python script
echo [START] Launching Smart Start
echo.

REM Pass parameters to Smart Start (except --clear)
if "%CLEAR_MODE%"=="true" (
    "%PYTHON_CMD%" scripts\development\smart_start.py
) else (
    "%PYTHON_CMD%" scripts\development\smart_start.py %*
)

REM Check if the script ran successfully
if errorlevel 1 (
    echo.
    echo [ERROR] Smart Start encountered an error
    echo [INFO] Check the logs above for details
    pause
    exit /b 1
) else (
    echo.
    echo [SUCCESS] Smart Start completed successfully!
)

REM Keep window open if run directly
if "%0" == "%~dpnx0" (
    echo.
    echo [INFO] Press any key to exit...
    pause > nul
)
